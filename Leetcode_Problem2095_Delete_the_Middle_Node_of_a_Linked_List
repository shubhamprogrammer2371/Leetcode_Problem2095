/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* deleteMiddle(struct ListNode* head){
    if(!head->next)
        return 0;
    struct ListNode* slow = head;
    struct ListNode* fast = head->next;
    while(fast && fast->next)
    {
        fast = fast->next->next;
        if(!fast) break;
        slow = slow->next;
    }
    struct ListNode *q = slow->next;
    slow->next = slow->next->next;
    free(q);
    return head;
}


------------------------------------------------------------------------------


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* deleteMiddle(struct ListNode* head){
    if(head->next == NULL)
        return NULL;
    struct ListNode * temp = head;
    int count = 0;
    while(temp != NULL)
    {
        count++;
        temp = temp->next;
    }
    temp = head;
    for(int i = 0; i < count/2 - 1; i++)
        temp = temp->next;
    temp->next = temp->next->next;
    return head;
}


------------------------------------------------------------------------------------


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* deleteMiddle(struct ListNode* head){
    if(!head->next)
        return 0;
    struct ListNode * slow = head;
    struct ListNode * fast = head->next->next;
    while(fast && fast->next)
    {
        fast = fast->next->next;
        slow = slow->next;
    }
    slow->next = slow->next->next;
    return head;
}
